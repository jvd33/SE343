@model KennUTicket.Models.Ticket
@using KennUTicket.Models
@using KennUTicket.DAL
@using Microsoft.AspNet.Identity
@using Microsoft.AspNet.Identity.EntityFramework
@Scripts.Render("~/Scripts/KennUTicketAPI.js")
@functions {

    private string getUsername(string id)
    {
        var ctx = new TicketContext();
        var userStore = new UserStore<User>(ctx);
        var manager = new UserManager<User>(userStore);
        var user = manager.FindById(id);
        if (user != null)
        {
            return user.UserName;

        }
        else
        {
            return "";
        }
    }
}

<h2>Details</h2>

<div>
    <h4>Ticket</h4>
    <hr />
    <dl class="dl-horizontal">

        <dt>
            @Html.DisplayNameFor(model => model.Title)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Title)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Description)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Description)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Category)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Category)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.CreatedBy)
        </dt>

        <dd>
            @{
                var cid = getUsername(Model.CreatedByID);
            }
            @Html.DisplayFor(modelItem => cid)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.AssignedTo)
        </dt>

        <dd>
            @{
                var aid = getUsername(Model.AssignedToID);
            }
            @Html.DisplayFor(modelItem => aid)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.CreatedDate)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.CreatedDate)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.LastUpdatedBy)
        </dt>

        <dd>
            @{
                var lid = getUsername(Model.LastUpdatedByID);
            }
            @Html.DisplayFor(modelItem => lid)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.LastUpdateDate)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.LastUpdateDate)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Priority)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Priority)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.WearableNumber)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.WearableNumber)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.OrderNumber)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.OrderNumber)
        </dd>
    </dl>
    <div class="form-group">

        External Call Stubs
        <div class="text-success" id="result"></div>
        <div class="text-success" id="output"></div>
        <div class="form-group">
            <input type="button" value="Validate Order Number" onclick="validate_order(@Model.OrderNumber)" class="btn btn-default" />
            <input type="button" value="Initiate Refund" onclick="refund_order(@Model.OrderNumber)" class="btn btn-default" />
        </div>
        Internal Functionality Stubs
        <div class="text-success" id="internal1"></div>
        <div class="text-success" id="internal2"></div>
        <div class="form-group">
            <input type="button" value="Confirm Refund Received" onclick="confirm_product_received(@Model.ID)" class="btn btn-default" />
            <input type="button" value="Confirm Refund Complete" onclick="confirm_refund(@Model.ID)" class="btn btn-default" />
        </div>
    </div>
</div>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.ID }) |
    @Html.ActionLink("Back to List", "Index")
</p>
